type Query {
    findAllCompanies(filter: CompanyFilter): CompanyConnection!
    findCompanyById(companyId: Int!): CompanyResponse!
}

type Mutation {
    createCompany(createRequest: CreateCompanyRequest!): CompanyResponse!
}

input CompanyFilter {
    statusIn: [CompanyState!]
}

type CompanyConnection {
    totalCount: Int!
    responses: [CompanyResponse!]!
}

type CompanyResponse {
    id: ID!
    alias: String!
    state: CompanyState!,
    employees: [Employee]
}

type Employee {
    id: Int,
    companyId: String
    name: String
}

enum CompanyState {
    NORMAL
    PAUSED
    CLOSED
    DELETED
}

input CreateCompanyRequest {
    id: String!
    alias: String!
    employees: [EmployeeInput!]!
}

input EmployeeInput {
    name: String
}
